pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'mysonar'
        DOCKER_IMAGE = "praveen22233/mygameapp:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('dockerhub')
    }
    stages {
        stage("Clean") {
            steps {
                cleanWs()
            }
        }
        stage("Clone Code") {
            steps {
                git "https://github.com/Praveenchoudary/Kubernetes-project.git"
            }
        }
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('mysonar') {
                    sh "${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectName=game -Dsonar.projectKey=game"
                }
            }
        }
        stage("Quality Gates") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'mysonar'
                }
            }
        }
        stage("Install Dependencies") {
            steps {
                sh 'npm install'
            }
        }
        stage("Build and Push Docker Image") {
            steps {
                script {
                    echo "Building and pushing Docker image to Docker Hub..."
                    def dockerImage = docker.build("${DOCKER_IMAGE}")
                    docker.withRegistry('', 'dockerhub') {
                        dockerImage.push()
                    }
                }
            }
        }
        stage("Trivy File System Scan") {
            steps {
                echo "Scanning the file system for vulnerabilities..."
                sh "trivy fs . > trivyfile.txt"
            }
        }
        stage("Trivy Image Scan") {
            steps {
                echo "Scanning Docker image ${DOCKER_IMAGE} for vulnerabilities..."
                sh "trivy image ${DOCKER_IMAGE}"
            }
        }
        stage("Update Deployment File in GitHub") {
            environment {
                GIT_REPO_NAME = "Kubernetes-project"
                GIT_USER_NAME = "Praveenchoudary"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "praveenchoudarychinthala@gmail.com"
                        git config user.name "Praveenchoudary"

                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment/deployment-svc.yml
                        
                        git add deployment/deployment-svc.yml
                        if git diff --cached --quiet; then
                            echo "No changes to commit."
                        else
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:master
                        fi
                    '''
                }
            }
        }
    }
}
